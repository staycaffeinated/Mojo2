buildscript {
    apply from: "gradle/dependencies.gradle"
    repositories {
      mavenCentral()
      }
}
// ----------------------------------------------------------------------------
// plugins
// ----------------------------------------------------------------------------
plugins {
    // See https://github.com/diffplug/spotless-changelog
    id 'com.diffplug.spotless-changelog' version '2.2.0'

    // This plugin helps collate findings between the subprojects
    id 'org.kordamp.gradle.jacoco' version '0.46.0'
    id 'org.kordamp.gradle.testing' version '0.46.0'

    id 'java'
    id 'idea'
    id 'jacoco'

    // this enables lombok
    id 'io.freefair.lombok' version '5.3.0'

    // Integration test plugin
    id "com.coditory.integration-test" version "1.2.1"

    // provides detailed test reports
    // This plugin seems to hide the output of integrationTests or, at least,
    // not make the results of integrationTests obvious.
    // id "com.monnage.test-report" version "1.4"
    
    // creates a 'fat-jar' (one-jar)
    id "com.github.johnrengelman.shadow" version "6.1.0"

    id "org.sonarqube" version "3.3"

    id "com.github.ben-manes.versions" version "0.39.0"
}

spotlessChangelog {
    changelogFile 'CHANGELOG.md'
    enforceCheck true
    }


// ----------------------------------------------------------------------------
// basics
// ----------------------------------------------------------------------------
group 'mmm.coffee.mojo'
version '0.1.1'

allprojects {
  repositories {
    mavenCentral()
    }

  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'jacoco'
  apply plugin: "com.coditory.integration-test"

  //sourceCompatibility = JavaVersion.VERSION_17
  //targetCompatibility = JavaVersion.VERSION_17

  configurations.all {
      // See https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
      resolutionStrategy {
          // fail fast on version conflicts (including transitive dependencies)
          // failOnVersionConflict()

          // cache dynamic versions for 10 minutes
          cacheDynamicVersionsFor 10*60, 'seconds'
          // don't cache changing modules at all
          cacheChangingModulesFor 0, 'seconds'
      }
  }
}

// ----------------------------------------------------------------------------
// Sub-projects
// ----------------------------------------------------------------------------
subprojects {
    tasks.withType(Test) {
        useJUnitPlatform()
        testLogging { events "passed", "skipped", "failed" }
    }
}

// ----------------------------------------------------------------------------
// Make all tests use JUnit5
// ----------------------------------------------------------------------------
tasks.withType(Test) {
    useJUnitPlatform()
    testLogging { events "passed", "skipped", "failed" }
}

// ----------------------------------------------------------------------------
// ensure JUnit5 is used
// ----------------------------------------------------------------------------
test {
    useJUnitPlatform()
}

// ----------------------------------------------------------------------------
// Lint options (defaulting to extreme verbosity)
// ----------------------------------------------------------------------------
compileJava.options*.compilerArgs = [
        "-Xlint:serial",    "-Xlint:varargs",     "-Xlint:cast",        "-Xlint:classfile",
        "-Xlint:dep-ann",   "-Xlint:divzero",     "-Xlint:empty",       "-Xlint:finally",
        "-Xlint:overrides", "-Xlint:path",        "-Xlint:-processing", "-Xlint:static",
        "-Xlint:try",       "-Xlint:fallthrough", "-Xlint:rawtypes",    "-Xlint:deprecation",
        "-Xlint:unchecked", "-Xlint:-options"
        ]

compileTestJava.options*.compilerArgs = [
        "-Xlint:serial",     "-Xlint:varargs",      "-Xlint:cast",        "-Xlint:classfile",
        "-Xlint:dep-ann",    "-Xlint:divzero",      "-Xlint:empty",       "-Xlint:finally",
        "-Xlint:overrides",  "-Xlint:path",         "-Xlint:-processing", "-Xlint:static",
        "-Xlint:try",        "-Xlint:-fallthrough", "-Xlint:-rawtypes",   "-Xlint:-deprecation",
        "-Xlint:-unchecked", "-Xlint:-options"
        ]


// ----------------------------------------------------------------------------
// Jacoco configuration
// ----------------------------------------------------------------------------
test {
    finalizedBy jacocoTestReport 
    jacoco {
        includes = [ "src/main/java" ]
    }
}

jacocoTestReport {
    dependsOn test
    dependsOn integrationTest
    reports {
        xml.enabled(true)   // for export to sonarqube
        html.enabled(true)
    }
}
// --------------------------------------------------------------
// Sonarqube configuration
// --------------------------------------------------------------
sonarqube {
    properties {
        property "sonar.coverage.exclusions", "**/*Exception.java,**/*Test.java,**/*IT.java,**/MojoApplication.java"

        // The following file is created when the codeCoverageReport task is run
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    }
}
tasks['sonarqube'].dependsOn test
tasks['sonarqube'].dependsOn integrationTest

// From: https://docs.gradle.org/6.4-rc-1/samples/sample_jvm_multi_project_with_code_coverage.html
// A task to gather code coverage from multiple subprojects
// NOTE: the `JacocoReport` tasks do *not* depend on the `test` task by default. Meaning you have to ensure
// that `test` (or other tasks generating code coverage) run before generating the report.
// You can achieve this by calling the `test` lifecycle task manually
// $ ./gradlew test codeCoverageReport
tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
    }
}

